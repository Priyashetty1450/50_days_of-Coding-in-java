

### ðŸ“˜ Day 4 â€“ Java Basics Recap

- ðŸ”¹ **Variables**: Containers used to store data values during program execution.
- ðŸ”¹ **Identifiers**: Names assigned to variables, methods, classes, etc. Must follow rules:
  - Begin with a letter, `_`, or `$`
  - Cannot use Java reserved keywords (e.g., `class`, `int`)
- ðŸ”¹ **Primitive Data Types**:
  - `int` â€“ stores integers (e.g., 10, -5)
  - `float` / `double` â€“ stores decimal numbers
  - `char` â€“ stores single characters (e.g., `'A'`)
  - `boolean` â€“ stores `true` or `false`
- ðŸ”¹ **Type Declaration**: Syntax like `int age = 25;` defines both type and value.
- ðŸ”¹ **Type Safety**: Java enforces strict typing to prevent mismatched operations.
- ðŸ”¹ **Memory Usage**: Each data type consumes different memory (e.g., `int` = 4 bytes).
- ðŸ”¹ **Best Practices**: Use meaningful identifiers and choose appropriate data types for clarity and efficiency.
##Code
class Code{
    int data;
    Code next;
    Code(int data){
        this.data=data;
    }
    public static void display(Code head){
        Code temp=head;
        while(temp!=null){
            System.out.println(temp.data+"  ");
            temp=temp.next;
        }
        
    }
    public static Code reverse(Code head){
       Code prev = null;
    Code current = head;
    Code next = null;

    while(current != null){
        next = current.next;
        current.next = prev;
        prev = current;
        current = next;
    }
    return prev; // new head of reversed list


    }
}

 public class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
	    
	Code n=new Code(10);
	Code n1=new Code(20);
	Code n2=new Code(30);
	Code n3=new Code(40);
	Code n4=new Code(50);
	Code head=n;

	n.next=n1;
	n1.next=n2;
	n2.next=n3;
	n3.next=n4;
	n4.next=null;
	
 head = Code.reverse(head); // âœ… update head
    Code.display(head);  
	

	}
}

